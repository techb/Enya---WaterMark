<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<HTML>
<HEAD><TITLE>Tcl_ObjType manual page - Tcl Library Procedures</TITLE>
<link rel="stylesheet" href="../docs.css" type="text/css" media="all">
</HEAD>
<BODY><H2><a href="../contents.htm">Tcl Documentation</a> <small>&gt;</small> <a href="contents.htm">TclLib</a> <small>&gt;</small> ObjectType</H2>
<H3><A HREF="../UserCmd/contents.htm">Tcl Applications</A> | <A HREF="../TclCmd/contents.htm">Tcl Commands</A> | <A HREF="../TclLib/contents.htm">Tcl Library</A></H3>
<DL>
<DD><A HREF="ObjectType.htm#M2" NAME="L469">NAME</A>
<DL><DD>Tcl_RegisterObjType, Tcl_GetObjType, Tcl_AppendAllObjTypes, Tcl_ConvertToType  - manipulate Tcl object types</DD></DL>
<DD><A HREF="ObjectType.htm#M3" NAME="L470">SYNOPSIS</A>
<DL>
<DD><B>#include &lt;tcl.h&gt;</B>
<DD><B>Tcl_RegisterObjType</B>(<I>typePtr</I>)
<DD>Tcl_ObjType *
<DD><B>Tcl_GetObjType</B>(<I>typeName</I>)
<DD>int
<DD><B>Tcl_AppendAllObjTypes</B>(<I>interp, objPtr</I>)
<DD>int
<DD><B>Tcl_ConvertToType</B>(<I>interp, objPtr, typePtr</I>)
</DL>
<DD><A HREF="ObjectType.htm#M4" NAME="L471">ARGUMENTS</A>
<DL class="arguments">
</DL>
<DD><A HREF="ObjectType.htm#M5" NAME="L472">DESCRIPTION</A>
<DD><A HREF="ObjectType.htm#M6" NAME="L473">THE TCL_OBJTYPE STRUCTURE</A>
<DD><A HREF="ObjectType.htm#M7" NAME="L474">THE NAME FIELD</A>
<DD><A HREF="ObjectType.htm#M8" NAME="L475">THE SETFROMANYPROC FIELD</A>
<DD><A HREF="ObjectType.htm#M9" NAME="L476">THE UPDATESTRINGPROC FIELD</A>
<DD><A HREF="ObjectType.htm#M10" NAME="L477">THE DUPINTREPPROC FIELD</A>
<DD><A HREF="ObjectType.htm#M11" NAME="L478">THE FREEINTREPPROC FIELD</A>
<DD><A HREF="ObjectType.htm#M12" NAME="L479">SEE ALSO</A>
<DD><A HREF="ObjectType.htm#M13" NAME="L480">KEYWORDS</A>
</DL>
<H3><A NAME="M2">NAME</A></H3>
Tcl_RegisterObjType, Tcl_GetObjType, Tcl_AppendAllObjTypes, Tcl_ConvertToType  - manipulate Tcl object types
<H3><A NAME="M3">SYNOPSIS</A></H3>
<B>#include &lt;tcl.h&gt;</B><BR>
<B>Tcl_RegisterObjType</B>(<I>typePtr</I>)<BR>
Tcl_ObjType *<BR>
<B>Tcl_GetObjType</B>(<I>typeName</I>)<BR>
int<BR>
<B>Tcl_AppendAllObjTypes</B>(<I>interp, objPtr</I>)<BR>
int<BR>
<B>Tcl_ConvertToType</B>(<I>interp, objPtr, typePtr</I>)<BR>
<H3><A NAME="M4">ARGUMENTS</A></H3>
<DL class="arguments">
<DT>Tcl_ObjType <B>*typePtr</B> (in)<DD>
Points to the structure containing information about the Tcl object type.
This storage must live forever,
typically by being statically allocated.
<P><DT>const char <B>*typeName</B> (in)<DD>
The name of a Tcl object type that <B>Tcl_GetObjType</B> should look up.
<P><DT><A HREF="../TclLib/Interp.htm">Tcl_Interp</A> <B>*interp</B> (in)<DD>
Interpreter to use for error reporting.
<P><DT>Tcl_Obj <B>*objPtr</B> (in)<DD>
For <B>Tcl_AppendAllObjTypes</B>, this points to the object onto which
it appends the name of each object type as a list element.
For <B>Tcl_ConvertToType</B>, this points to an object that
must have been the result of a previous call to <B><A HREF="../TclLib/Object.htm">Tcl_NewObj</A></B>.
<P></DL>
<H3><A NAME="M5">DESCRIPTION</A></H3>
The procedures in this man page manage Tcl object types.
They are used to register new object types, look up types,
and force conversions from one type to another.
<P>
<B>Tcl_RegisterObjType</B> registers a new Tcl object type
in the table of all object types that <B>Tcl_GetObjType</B>
can look up by name.  There are other object types supported by Tcl
as well, which Tcl chooses not to register.  Extensions can likewise
choose to register the object types they create or not.
The argument <I>typePtr</I> points to a Tcl_ObjType structure that
describes the new type by giving its name
and by supplying pointers to four procedures
that implement the type.
If the type table already contains a type
with the same name as in <I>typePtr</I>,
it is replaced with the new type.
The Tcl_ObjType structure is described
in the section <B>THE TCL_OBJTYPE STRUCTURE</B> below.
<P>
<B>Tcl_GetObjType</B> returns a pointer to the registered Tcl_ObjType
with name <I>typeName</I>.
It returns NULL if no type with that name is registered.
<P>
<B>Tcl_AppendAllObjTypes</B> appends the name of each registered object type
as a list element onto the Tcl object referenced by <I>objPtr</I>.
The return value is <B>TCL_OK</B> unless there was an error
converting <I>objPtr</I> to a list object;
in that case <B>TCL_ERROR</B> is returned.
<P>
<B>Tcl_ConvertToType</B> converts an object from one type to another
if possible.
It creates a new internal representation for <I>objPtr</I>
appropriate for the target type <I>typePtr</I>
and sets its <I>typePtr</I> member as determined by calling the 
<I>typePtr-&gt;setFromAnyProc</I> routine.  
Any internal representation for <I>objPtr</I>'s old type is freed.
If an error occurs during conversion, it returns <B>TCL_ERROR</B>
and leaves an error message in the result object for <I>interp</I>
unless <I>interp</I> is NULL.
Otherwise, it returns <B>TCL_OK</B>.
Passing a NULL <I>interp</I> allows this procedure to be used
as a test whether the conversion can be done (and in fact was done).
<P>
In many cases, the <I>typePtr-&gt;setFromAnyProc</I> routine will
set <I>objPtr-&gt;typePtr</I> to the argument value <I>typePtr</I>,
but that is no longer guaranteed.  The <I>setFromAnyProc</I> is
free to set the internal representation for <I>objPtr</I> to make
use of another related Tcl_ObjType, if it sees fit.
<H3><A NAME="M6">THE TCL_OBJTYPE STRUCTURE</A></H3>
Extension writers can define new object types by defining four
procedures and
initializing a Tcl_ObjType structure to describe the type.
Extension writers may also pass a pointer to their Tcl_ObjType
structure to <B>Tcl_RegisterObjType</B> if they wish to permit
other extensions to look up their Tcl_ObjType by name with
the <B>Tcl_GetObjType</B> routine.
The <B>Tcl_ObjType</B> structure is defined as follows:
<P>
<PRE>typedef struct Tcl_ObjType {
    char *<I>name</I>;
    Tcl_FreeInternalRepProc *<I>freeIntRepProc</I>;
    Tcl_DupInternalRepProc *<I>dupIntRepProc</I>;
    Tcl_UpdateStringProc *<I>updateStringProc</I>;
    Tcl_SetFromAnyProc *<I>setFromAnyProc</I>;
} Tcl_ObjType;</PRE>
<H4><A NAME="M7">THE NAME FIELD</A></H4>
The <I>name</I> member describes the name of the type, e.g. <B>int</B>.
When a type is registered, this is the name used by callers
of <B>Tcl_GetObjType</B> to lookup the type.  For unregistered
types, the <I>name</I> field is primarily of value for debugging.
The remaining four members are pointers to procedures
called by the generic Tcl object code:
<H4><A NAME="M8">THE SETFROMANYPROC FIELD</A></H4>
The <I>setFromAnyProc</I> member contains the address of a function
called to create a valid internal representation
from an object's string representation.
<P>
<PRE>typedef int (Tcl_SetFromAnyProc) (<A HREF="../TclLib/Interp.htm">Tcl_Interp</A> *<I>interp</I>,
        Tcl_Obj *<I>objPtr</I>);</PRE>
<P>
If an internal representation cannot be created from the string,
it returns <B>TCL_ERROR</B> and puts a message
describing the error in the result object for <I>interp</I>
unless <I>interp</I> is NULL.
If <I>setFromAnyProc</I> is successful,
it stores the new internal representation,
sets <I>objPtr</I>'s <I>typePtr</I> member to point to
the <B>Tcl_ObjType</B> struct corresponding to the new
internal representation, and returns <B>TCL_OK</B>.
Before setting the new internal representation,
the <I>setFromAnyProc</I> must free any internal representation
of <I>objPtr</I>'s old type;
it does this by calling the old type's <I>freeIntRepProc</I>
if it is not NULL.
<P>
As an example, the <I>setFromAnyProc</I> for the built-in Tcl list type
gets an up-to-date string representation for <I>objPtr</I>
by calling <B><A HREF="../TclLib/StringObj.htm">Tcl_GetStringFromObj</A></B>.
It parses the string to verify it is in a valid list format and
to obtain each element value in the list, and, if this succeeds,
stores the list elements in <I>objPtr</I>'s internal representation
and sets <I>objPtr</I>'s <I>typePtr</I> member to point to the list type's
Tcl_ObjType structure.
<P>
Do not release <I>objPtr</I>'s old internal representation unless you
replace it with a new one or reset the <I>typePtr</I> member to NULL.
<P>
The <I>setFromAnyProc</I> member may be set to NULL, if the routines
making use of the internal representation have no need to derive that
internal representation from an arbitrary string value.  However, in
this case, passing a pointer to the type to Tcl_ConvertToType() will
lead to a panic, so to avoid this possibility, the type
should <I>not</I> be registered.
<H4><A NAME="M9">THE UPDATESTRINGPROC FIELD</A></H4>
The <I>updateStringProc</I> member contains the address of a function
called to create a valid string representation
from an object's internal representation.
<P>
<PRE>typedef void (Tcl_UpdateStringProc) (Tcl_Obj *<I>objPtr</I>);</PRE>
<P>
<I>objPtr</I>'s <I>bytes</I> member is always NULL when it is called.
It must always set <I>bytes</I> non-NULL before returning.
We require the string representation's byte array
to have a null after the last byte, at offset <I>length</I>,
and to have no null bytes before that; this allows string representations 
to be treated as conventional null character-terminated C strings.
These restrictions are easily met by using Tcl's internal UTF encoding
for the string representation, same as one would do for other
Tcl routines accepting string values as arguments.
Storage for the byte array must be allocated in the heap by <B><A HREF="../TclLib/Alloc.htm">Tcl_Alloc</A></B>
or <B><A HREF="../TclLib/Alloc.htm">ckalloc</A></B>.  Note that <I>updateStringProc</I>s must allocate
enough storage for the string's bytes and the terminating null byte.
<P>
The <I>updateStringProc</I> for Tcl's built-in double type, for example,
calls <A HREF="../TclLib/PrintDbl.htm">Tcl_PrintDouble</A> to write to a buffer of size TCL_DOUBLE_SPACE,
then allocates and copies the string representation to just enough
space to hold it.  A pointer to the allocated space is stored in
the <I>bytes</I> member.
<P>
The <I>updateStringProc</I> member may be set to NULL, if the routines
making use of the internal representation are written so that the
string representation is never invalidated.  Failure to meet this
obligation will lead to panics or crashes when <B><A HREF="../TclLib/StringObj.htm">Tcl_GetStringFromObj</A></B>
or other similar routines ask for the string representation.
<H4><A NAME="M10">THE DUPINTREPPROC FIELD</A></H4>
The <I>dupIntRepProc</I> member contains the address of a function
called to copy an internal representation from one object to another.
<P>
<PRE>typedef void (Tcl_DupInternalRepProc) (Tcl_Obj *<I>srcPtr</I>,
        Tcl_Obj *<I>dupPtr</I>);</PRE>
<P>
<I>dupPtr</I>'s internal representation is made a copy of <I>srcPtr</I>'s
internal representation.
Before the call,
<I>srcPtr</I>'s internal representation is valid and <I>dupPtr</I>'s is not.
<I>srcPtr</I>'s object type determines what
copying its internal representation means.
<P>
For example, the <I>dupIntRepProc</I> for the Tcl integer type
simply copies an integer.
The built-in list type's <I>dupIntRepProc</I> uses a far more
sophisticated scheme to continue sharing storage as much as it
reasonably can.
<H4><A NAME="M11">THE FREEINTREPPROC FIELD</A></H4>
The <I>freeIntRepProc</I> member contains the address of a function
that is called when an object is freed.
<P>
<PRE>typedef void (Tcl_FreeInternalRepProc) (Tcl_Obj *<I>objPtr</I>);</PRE>
<P>
The <I>freeIntRepProc</I> function can deallocate the storage
for the object's internal representation
and do other type-specific processing necessary when an object is freed.
<P>
For example, the list type's <I>freeIntRepProc</I> respects
the storage sharing scheme established by the <I>dupIntRepProc</I>
so that it only frees storage when the last object sharing it
is being freed.
<P>
The <I>freeIntRepProc</I> member can be set to NULL
to indicate that the internal representation does not require freeing.
The <I>freeIntRepProc</I> implementation must not access the
<I>bytes</I> member of the object, since Tcl makes its own internal
uses of that field during object deletion.  The defined tasks for
the <I>freeIntRepProc</I> have no need to consult the <I>bytes</I>
member.
<H3><A NAME="M12">SEE ALSO</A></H3>
<B><A HREF="../TclLib/Object.htm">Tcl_NewObj</A></B>, <B><A HREF="../TclLib/Object.htm">Tcl_DecrRefCount</A></B>, <B><A HREF="../TclLib/Object.htm">Tcl_IncrRefCount</A></B>
<H3><A NAME="M13">KEYWORDS</A></H3>
<A href="../Keywords/I.htm#internal representation">internal representation</A>, <A href="../Keywords/O.htm#object">object</A>, <A href="../Keywords/O.htm#object type">object type</A>, <A href="../Keywords/S.htm#string representation">string representation</A>, <A href="../Keywords/T.htm#type conversion">type conversion</A>
<div class="copy">Copyright &copy; 1995-1997 Roger E. Critchlow Jr.
Copyright &copy; 1996-1997 Sun Microsystems, Inc.
</div>
</BODY></HTML>

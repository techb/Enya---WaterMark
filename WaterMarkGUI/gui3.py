#!/usr/bin/env python3
#
# GUI module generated by PAGE version 4.12
# In conjunction with Tcl version 8.6
#    Apr 11, 2018 08:51:23 AM

import sys, os
from pathlib import Path
import threading

try:
    from Tkinter import *
except ImportError:
    from tkinter import *

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import enya_support2 as enya_support
from tkinter.filedialog import askopenfilename, askdirectory
import enya

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    enya_support.set_Tk_var()
    top = Enya____Watermark (root)
    enya_support.init(root, top)
    root.mainloop()

w = None
def create_Enya____Watermark(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    enya_support.set_Tk_var()
    top = Enya____Watermark (w)
    enya_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Enya____Watermark():
    global w
    w.destroy()
    w = None


class Enya____Watermark:

    def _browsewdir(self):
        self.wimg = askopenfilename(initialdir=self.home, filetypes =(("PNG File", "*.png"),), title = "Choose A Watermark Image.")
        self.pathtowimg.insert(0, self.wimg)

    def _browseimgdir(self):
        self.imgdir = askdirectory(initialdir=self.home, title='Please select a directory')
        self.pathtodir.insert(0, self.imgdir)

    def _getcheckboxes(self):
	    ''' dict holding the values of the placement checkboxes. the math is in a string and vars are hardcoded
	    because I'm using eval() like a monster. ovrwrt and mkcpy aren't used and leftover from earlier version'''
	    
	    return { 'tleft' : (enya_support.che39.get(), "( 0,0 )"),
        'tcenter' : (enya_support.che40.get(), "( int((pwidth/2)-(wwidth/2)), 0 )"),
        'tright' : (enya_support.che41.get(), "( pwidth-wwidth, 0 )"),
        'bleft' : (enya_support.che43.get(), "( 0, pheight-wheight )"),
        'bcenter' : (enya_support.che44.get(), "( int((pwidth/2)-(wwidth/2)), pheight-wheight )"),
        'bright' : (enya_support.che45.get(), "( pwidth-wwidth, pheight-wheight )"),
        'mleft' : (enya_support.che42.get(), "( 0, int((pheight/2)-(wheight/2)) )"),
        'mcenter' : (enya_support.che47.get(), "( int((pwidth/2)-(wwidth/2)), int((pheight/2)-(wheight/2)) )"),
        'mright' : (enya_support.che46.get(), "( pwidth-wwidth, int((pheight/2)-(wheight/2)) )"),
        'ovrwrt' : enya_support.che51.get(),
        'mkcpy' : enya_support.che52.get() }

    def _main(self):
        ''' main when start button is hit. put the actual watermarking in a thread so gui doesn't hang '''
        self.progbar["value"] = 0
        checkboxes = self._getcheckboxes()
        mark = enya.Enya()
        
        if not self.wimg:
            self.wimg = self.pathtowimg.get()
        if not self.imgdir:
            self.imgdir =  self.pathtodir.get()
        
        threading.Thread(target=mark.watermark, args=[self.wimg, self.imgdir, self.printlog, self.progbar, checkboxes, self.start, root]).start()

    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("616x486+1160+345")
        top.title("Enya -- Watermark")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.home = str(Path.home())
        self.wimg = None
        self.imgdir = None

        self.pathtowimg = Entry(top)
        self.pathtowimg.place(relx=0.02, rely=0.08,height=20, relwidth=0.28)
        self.pathtowimg.configure(background="white")
        self.pathtowimg.configure(font="TkFixedFont")
        self.pathtowimg.configure(foreground="#000000")
        self.pathtowimg.configure(highlightbackground="#d9d9d9")
        self.pathtowimg.configure(highlightcolor="black")
        self.pathtowimg.configure(insertbackground="black")
        self.pathtowimg.configure(selectbackground="#c4c4c4")
        self.pathtowimg.configure(selectforeground="black")

        self.Label1 = Label(top)
        self.Label1.place(relx=0.0, rely=0.02, height=24, width=129)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Watermark Image''')

        self.browsewimg = Button(top)
        self.browsewimg.place(relx=0.32, rely=0.08, height=24, width=57)
        self.browsewimg.configure(activebackground="#d9d9d9")
        self.browsewimg.configure(activeforeground="#000000")
        self.browsewimg.configure(background="#d9d9d9")
        self.browsewimg.configure(foreground="#000000")
        self.browsewimg.configure(highlightbackground="#d9d9d9")
        self.browsewimg.configure(highlightcolor="black")
        self.browsewimg.configure(pady="0")
        self.browsewimg.configure(text='''Browse''')
        self.browsewimg.configure(command=self._browsewdir)

        self.Label2 = Label(top)
        self.Label2.place(relx=-0.02, rely=0.14, height=24, width=167)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Folder to watermark''')

        self.pathtodir = Entry(top)
        self.pathtodir.place(relx=0.02, rely=0.21,height=20, relwidth=0.28)
        self.pathtodir.configure(background="white")
        self.pathtodir.configure(font="TkFixedFont")
        self.pathtodir.configure(foreground="#000000")
        self.pathtodir.configure(highlightbackground="#d9d9d9")
        self.pathtodir.configure(highlightcolor="black")
        self.pathtodir.configure(insertbackground="black")
        self.pathtodir.configure(selectbackground="#c4c4c4")
        self.pathtodir.configure(selectforeground="black")

        self.browsewdir = Button(top)
        self.browsewdir.place(relx=0.32, rely=0.21, height=24, width=57)
        self.browsewdir.configure(activebackground="#d9d9d9")
        self.browsewdir.configure(activeforeground="#000000")
        self.browsewdir.configure(background="#d9d9d9")
        self.browsewdir.configure(foreground="#000000")
        self.browsewdir.configure(highlightbackground="#d9d9d9")
        self.browsewdir.configure(highlightcolor="black")
        self.browsewdir.configure(pady="0")
        self.browsewdir.configure(text='''Browse''')
        self.browsewdir.configure(command=self._browseimgdir)
        

        self.printlog = Text(top)
        self.printlog.place(relx=0.45, rely=0.08, relheight=0.73, relwidth=0.49)
        self.printlog.configure(background="white")
        self.printlog.configure(font="TkTextFont")
        self.printlog.configure(foreground="black")
        self.printlog.configure(highlightbackground="#d9d9d9")
        self.printlog.configure(highlightcolor="black")
        self.printlog.configure(insertbackground="black")
        self.printlog.configure(selectbackground="#c4c4c4")
        self.printlog.configure(selectforeground="black")
        self.printlog.configure(width=304)
        self.printlog.configure(wrap=WORD)

        self.Label3 = Label(top)
        self.Label3.place(relx=0.63, rely=0.02, height=21, width=66)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Log''')

        self.progbar = ttk.Progressbar(top)
        self.progbar.place(relx=0.03, rely=0.91, relwidth=0.91, relheight=0.0
                , height=22)

        self.Labelframe1 = LabelFrame(top)
        self.Labelframe1.place(relx=0.02, rely=0.37, relheight=0.44
                , relwidth=0.36)
        self.Labelframe1.configure(relief=GROOVE)
        self.Labelframe1.configure(foreground="black")
        self.Labelframe1.configure(background="#d9d9d9")
        self.Labelframe1.configure(highlightbackground="#d9d9d9")
        self.Labelframe1.configure(highlightcolor="black")
        self.Labelframe1.configure(width=220)

        self.placetopleft = Checkbutton(self.Labelframe1)
        self.placetopleft.place(relx=0.05, rely=0.05, relheight=0.1
                , relwidth=0.11, y=-13, h=13)
        self.placetopleft.configure(activebackground="#d9d9d9")
        self.placetopleft.configure(activeforeground="#000000")
        self.placetopleft.configure(background="#d9d9d9")
        self.placetopleft.configure(foreground="#000000")
        self.placetopleft.configure(highlightbackground="#d9d9d9")
        self.placetopleft.configure(highlightcolor="black")
        self.placetopleft.configure(justify=LEFT)
        self.placetopleft.configure(variable=enya_support.che39)
        enya_support.che39.set(0)

        self.placetopcenter = Checkbutton(self.Labelframe1)
        self.placetopcenter.place(relx=0.45, rely=0.05, relheight=0.1
                , relwidth=0.11, y=-13, h=13)
        self.placetopcenter.configure(activebackground="#d9d9d9")
        self.placetopcenter.configure(activeforeground="#000000")
        self.placetopcenter.configure(background="#d9d9d9")
        self.placetopcenter.configure(foreground="#000000")
        self.placetopcenter.configure(highlightbackground="#d9d9d9")
        self.placetopcenter.configure(highlightcolor="black")
        self.placetopcenter.configure(justify=LEFT)
        self.placetopcenter.configure(variable=enya_support.che40)
        enya_support.che40.set(0)

        self.placetopright = Checkbutton(self.Labelframe1)
        self.placetopright.place(relx=0.82, rely=0.05, relheight=0.1
                , relwidth=0.11, y=-13, h=13)
        self.placetopright.configure(activebackground="#d9d9d9")
        self.placetopright.configure(activeforeground="#000000")
        self.placetopright.configure(background="#d9d9d9")
        self.placetopright.configure(foreground="#000000")
        self.placetopright.configure(highlightbackground="#d9d9d9")
        self.placetopright.configure(highlightcolor="black")
        self.placetopright.configure(justify=LEFT)
        self.placetopright.configure(variable=enya_support.che41)
        enya_support.che41.set(0)

        self.placeleft = Checkbutton(self.Labelframe1)
        self.placeleft.place(relx=0.05, rely=0.47, relheight=0.1, relwidth=0.11
                , y=-13, h=13)
        self.placeleft.configure(activebackground="#d9d9d9")
        self.placeleft.configure(activeforeground="#000000")
        self.placeleft.configure(background="#d9d9d9")
        self.placeleft.configure(foreground="#000000")
        self.placeleft.configure(highlightbackground="#d9d9d9")
        self.placeleft.configure(highlightcolor="black")
        self.placeleft.configure(justify=LEFT)
        self.placeleft.configure(variable=enya_support.che42)
        enya_support.che42.set(0)

        self.placebottomleft = Checkbutton(self.Labelframe1)
        self.placebottomleft.place(relx=0.05, rely=0.84, relheight=0.1
                , relwidth=0.11, y=-13, h=13)
        self.placebottomleft.configure(activebackground="#d9d9d9")
        self.placebottomleft.configure(activeforeground="#000000")
        self.placebottomleft.configure(background="#d9d9d9")
        self.placebottomleft.configure(foreground="#000000")
        self.placebottomleft.configure(highlightbackground="#d9d9d9")
        self.placebottomleft.configure(highlightcolor="black")
        self.placebottomleft.configure(justify=LEFT)
        self.placebottomleft.configure(variable=enya_support.che43)
        enya_support.che43.set(0)

        self.placebottomcenter = Checkbutton(self.Labelframe1)
        self.placebottomcenter.place(relx=0.45, rely=0.84, relheight=0.1
                , relwidth=0.11, y=-13, h=13)
        self.placebottomcenter.configure(activebackground="#d9d9d9")
        self.placebottomcenter.configure(activeforeground="#000000")
        self.placebottomcenter.configure(background="#d9d9d9")
        self.placebottomcenter.configure(foreground="#000000")
        self.placebottomcenter.configure(highlightbackground="#d9d9d9")
        self.placebottomcenter.configure(highlightcolor="black")
        self.placebottomcenter.configure(justify=LEFT)
        self.placebottomcenter.configure(variable=enya_support.che44)
        enya_support.che44.set(0)

        self.placebottomright = Checkbutton(self.Labelframe1)
        self.placebottomright.place(relx=0.82, rely=0.84, relheight=0.1
                , relwidth=0.11, y=-13, h=13)
        self.placebottomright.configure(activebackground="#d9d9d9")
        self.placebottomright.configure(activeforeground="#000000")
        self.placebottomright.configure(background="#d9d9d9")
        self.placebottomright.configure(foreground="#000000")
        self.placebottomright.configure(highlightbackground="#d9d9d9")
        self.placebottomright.configure(highlightcolor="black")
        self.placebottomright.configure(justify=LEFT)
        self.placebottomright.configure(variable=enya_support.che45)
        enya_support.che45.set(0)

        self.placeright = Checkbutton(self.Labelframe1)
        self.placeright.place(relx=0.82, rely=0.47, relheight=0.1, relwidth=0.11
                , y=-13, h=13)
        self.placeright.configure(activebackground="#d9d9d9")
        self.placeright.configure(activeforeground="#000000")
        self.placeright.configure(background="#d9d9d9")
        self.placeright.configure(foreground="#000000")
        self.placeright.configure(highlightbackground="#d9d9d9")
        self.placeright.configure(highlightcolor="black")
        self.placeright.configure(justify=LEFT)
        self.placeright.configure(variable=enya_support.che46)
        enya_support.che46.set(0)

        self.placecenter = Checkbutton(self.Labelframe1)
        self.placecenter.place(relx=0.45, rely=0.47, relheight=0.1, relwidth=0.11
                , y=-13, h=13)
        self.placecenter.configure(activebackground="#d9d9d9")
        self.placecenter.configure(activeforeground="#000000")
        self.placecenter.configure(background="#d9d9d9")
        self.placecenter.configure(foreground="#000000")
        self.placecenter.configure(highlightbackground="#d9d9d9")
        self.placecenter.configure(highlightcolor="black")
        self.placecenter.configure(justify=LEFT)
        self.placecenter.configure(variable=enya_support.che47)
        enya_support.che47.set(0)

        self.Label4 = Label(top)
        self.Label4.place(relx=0.02, rely=0.31, height=24, width=175)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Where to place watermark''')

        self.start = Button(top)
        self.start.place(relx=0.62, rely=0.82, height=32, width=77)
        self.start.configure(activebackground="#d9d9d9")
        self.start.configure(activeforeground="#000000")
        self.start.configure(background="#d9d9d9")
        self.start.configure(foreground="#000000")
        self.start.configure(highlightbackground="#d9d9d9")
        self.start.configure(highlightcolor="black")
        self.start.configure(text='''Start''')
        self.start.configure(command=self._main)





if __name__ == '__main__':
    vp_start_gui()


